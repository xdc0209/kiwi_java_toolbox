JMC简介：
Java Mission Control，图形化的监控和管理工具，跟jvisualvm功能上有很多重合，但展现上不太相同。官网介绍中提到了一句：基本不引入性能开销。

使用要点：
实时监控：查看实时数据。
飞行记录器(黑匣子)：记录运行状态，生成文件(Windows下C:\Users\用户名\.jmc\5.5.0，Linux下$HOME/.jmc/5.5.0)，以便后期分析。

注意：
使用飞行记录器时，飞行记录模式可选Continuous和Profiling，建议使用Profiling，能保留更多信息，但对服务产生的影响会大一点。
使用飞行记录器时，Java服务器在Linux上生成的文件flight_recording_*.jfr，最好取到Windows下分析，这样分析的更快些。Linux上的JMC的分析页面加载很慢。

其他技巧：
JMC的最大作用是帮助我们发现具体哪个模块占用了比较大的内存，这里用的堆栈跟踪法，能够快速准确的定位出具体消耗内存比较大的模块。
内存-->分配-->新TLAB(线程本地分配缓存区)和TLAB外部(Eden中除TLAB外的内存)

参考：http://www.importnew.com/23150.html
参考：http://blog.csdn.net/yangzl2008/article/details/43202969
参考：http://blog.csdn.net/u014236541/article/details/49996251
TLAB(Thread Local Allocation Buffer)：堆是JVM中所有线程共享的，因此在其上进行对象内存的分配均需要进行加锁，这也导致了new对象的开销是比较大的，Sun Hotspot JVM为了提升对象内存分配的效率，对于所创建的线程都会在Eden Space上分配一块独立的空间TLAB，其大小由JVM根据运行的情况计算而得，在TLAB上分配对象时不需要加锁，因此JVM在给线程的对象分配内存时会尽量的在TLAB上分配，在这种情况下JVM中分配对象内存的性能和C基本是一样高效的，但如果对象过大的话则仍然是直接使用堆空间分配。
Java对象分配的过程(着重强调下TLAB的作用)：
1. 编译器通过逃逸分析，确定对象是在栈上分配还是在堆上分配。如果是在堆上分配，则2.
2. 如果tlab_top + size <= tlab_end，则在在TLAB上直接分配对象并增加tlab_top的值，如果现有的TLAB不足以存放当前对象则3.
3. 重新申请一个TLAB，并再次尝试存放当前对象。如果放不下，则4.
4. 在Eden区加锁(这个区是多线程共享的)，如果eden_top + size <= eden_end则将对象存放在Eden区，增加eden_top 的值，如果Eden区不足以存放，则5.
5. 执行一次Young GC(minor collection)。
6. 经过Young GC之后，如果Eden区任然不足以存放当前对象，则直接分配到老年代。

详细介绍：
====================================================================
JMC(Java Mission Control)使用说明
Java有着非常出色的垃圾回收机制，这个机制让没有被使用的内存及时回收和复用，减少了实际物理内存的开销，但是在一些敏感的应用中，比如交易系统和通信程序，回收期间的暂停是不能容忍的，所以应该尽量减少内存分配来让回收变少。那么程序在运行的过程中内存是如何分配的、垃圾是如何回收、垃圾回收暂停的时间、以及程序各个模块所占CPU的百分比等等问题成为了我们需要关系的问题，有没有工具能够实时的、直观的观测这一系列信息？有的，就是jdk7u40就自带的一个非常友好的工具：Java Mission Control(一下简称JMC)，JMC能够实时监控Java程序的运行情况，包括Java程序运行的各种指标，还能够通过飞行记录的方式查看Java程序一段时间的运行情况。下面我将介绍如何使用JMC工具。

1.实时监控
在左侧的JVM浏览器中双击刚刚创建的连接，点击MBean服务器，便能在右侧查看JVM实时状态信息：

可以看到在实时监控最下面包含6个选项卡：
1)概览：包含三个面板；
  a)仪表盘：以仪表的方式实时显示系统运行的参数，包括堆内存使用情况、JVM CPU占用情况、以及垃圾回收前后的堆内存情况，灰色和黑色的指针分标表示最大值和平均值；
  b)处理器：以趋势图直观的展示出JVM、操作系统动态CPU占用情况；
  c)内存：同样以趋势图直观的展示Java内存堆占用情况，可以查看计算机物理内存总量、已用计算机物理内存、已提交的堆、保留的堆、已用的堆。

2)MBean浏览器：以树形的结构显示目标JVM支持的所有MBean列表和属性、操作集。

3)触发器：添加触发规则并激活/停用这些规则；
  a)CPU占用率：包括JVM进程过高或者过低、操作系统CPU占用率过高或者过低；
  b)当发生JVM线程死锁；
  c)当垃圾回收，存活对象占堆大小百分比过大；
  d)当JVM线程总数过大等等；
此外，任何MBean属性都可以作为触发器使用，中间件(例如Tomcat、WebLogic、ActiveMQ)都有自己的扩展，双击触发器后，右侧即显示规则详情，可以定义触发的阀值、执行的动作等等。

4)系统：
  a)服务器信息，包含连接、操作系统、操作系统体系结构、处理器数量、物理内存总量等等信息；
  b)JVM统计信息，包含当前已经加载的类的数量、系统已运行时间；
  c)系统属性，JVM的系统属性。

5)内存：显示JVM内存占用情况；
  a)GC表，显示垃圾回收器的工作情况，包括GC总计时间、GC总次数、最近GC 开始结束时间、GC标识符、GC线程数等等；
  b)活动内存池，显示当前内存池的大小、已用大小、类型，包含代码缓存、垃圾回收的年轻代Eden区和Survivor区、垃圾回收永久代、垃圾收集年老代等等。

6)线程：显示JVM线程活动情况；
  a)活动线程图，显示当前存活线程的数量、守护线程的数量、线程数量峰值的实时曲线；
  b)活动线程，显示当前存活线程的列表，可以进行CPU占用分析、死锁检测、线程分配内存量的分析；
  c)限定线程的堆栈跟踪，显示瞬时的线程调用栈；

2.飞行记录器
在左侧的JVM浏览器中双击刚刚创建的连接，点击飞行记录器，设置相关信息：

如果设置为固定时间记录，则在时间到达之后，会自动停止记录；
如果设置为继续记录，则会持续不断的记录，直到JVM退出(注意：无论是自己完成退出还是被kill，记录的信息就丢失啦)或者接收到停止的指令，这种记录方式下可以随时进行dump操作。
虽然飞行记录器在JVM本地记录数据，但不在Java堆中记录，所以它并不会影响内存特性和垃圾回收，当飞行记录完成时，会在本地生成一个.jfr文件，该文件的默认路径为：Windows下C:\Users\用户名\.jmc\5.5.0，Linux下$HOME/.jmc/5.5.0，该文件包含飞行期间JVM中发生的各种事件。

飞行记录器工作原理
飞行记录器通过JVM内部API来收集数据，并存放在一个线程本地的缓冲中，并最终刷入全局内存缓冲，而内存缓冲中的数据会被放到磁盘中，当然磁盘文件是经过压缩的。所以每个记录数据块，要么在内存中，要么在磁盘中，这就意味着进程被停止或者宕机时，部分数据会丢失，JVM崩溃也有可能导致一部分数据的丢失。我们可以配置飞行记录器不使用磁盘空间，这样的话，全局内存缓冲会被循环使用，旧的数据将会自动丢弃。

飞行记录器模板管理
在JMC界面，点击窗口->飞行记录模板管理：
我们可以在jre/lib/jfr目录下看到两个自带模板：default.jfc(Continuous)和profile.jfc(Profiling)

飞行记录器数据分析
可以观察到：左侧是记录不同的视图，可以点击切换；右侧是主面板，顶部是时间轴，可以拖动滑块，可以改变聚焦的时间范围(如果勾选右边的同步选择可以再切换视图时保持聚集范围)，底部有若干选项卡，下面将逐个介绍：

一般信息
在底部总共包含4个选项卡：
1)概览：可以看到聚焦时间范围内的实时仪表(对占用、CPU占用、GC停顿时间)，以及CPU和堆使用情况的曲线图；
2)JVM信息：可以看到JVM的一些基本信息，包括启动时间、JVM参数等等；
3)系统属性：可以看到JVM的系统属性列表；
4)记录：可以显示记录的事件的列表。

内存
在底部共包含6个选项卡：
1)概览：
  a)内存使用量：显示聚焦时间范围内OS总内存、OS已使用内存、提交的堆、使用的堆的大小曲线图；
  b)GC配置：显示简单的GC配置；
  c)GC统计：显示简单的GC统计，包括垃圾回收次数、停顿时间；
  d)分配概要：显示为TLAB和对象分配的内存以及分配速率。
2)垃圾收集：
上面的的面板包含4个选项卡：
  a)堆：对的使用情况曲线，红色小柱代表GC停顿的持续时间(刻度在右边)；
  b)引用的对象：包含软应用、弱引用、最终引用、幻像引用的数量变化区域图；
  c)失败的提升：年轻代对象向年老代转移的GC动作，包含对象个数和大小等信息；
  d)失败的疏散：包含一个失败的疏散及其详细信息的列表。
下面的面板，左侧显示历次GC的列表，右侧显示单词GC的详细信息：
  a)一般信息：显示GC类型、触发原因、ID、开始结束时间、暂停时间；
  b)GC阶段：GC每个步骤的开始和持续时间；
  c)引用的对象：本次GC涉及的各类引用的数量；
  d)堆：堆在GC前后的大小对比；
  e)永生代：永生代在GC前后的大小对比。
3)GC时间：
显示各代、各次GC所消耗的时间以及可以查看到每次GC暂停的详细信息和GC暂停总时间；
4)GC配置：
显示GC的详细配置，包括 GC基本配置、堆的配置、年轻代的配置；
5)分配：
显示聚焦时间范围内的内存分配统计信息：
  a)一般信息：在线程本地分配缓冲(TLAB)内、外(即Eden(上次GC完毕之后新创建的对象)区域)中分配的对象个数、内存大小。面板下面是内存分配大小按时间的柱形图；
  b)新TLAB中的分配：在TLAB中分配的内存，按对象类型、或者按执行分配的线程的占比饼图，堆栈跟踪可以深度剖析分配内存热点所在的调用栈；
  c)TLAB外部的分配：在Eden区域的内存分配情况，包含的子选项卡同上；
6)对象统计信息：
显示对象数量和内存占用的统计信息，包含上下两个部分：
  a)上面的面板：显示占有堆内存百分比大于0.5%的类型的列表；
  b)下面的面板：显示增长数量最快的类型的列表。

代码
在底部共包含6个选项卡：
1)概览：
显示占用CPU最多的代码，分为上下两个面板：
  a)上面的面板：显示CPU时间占用最多的包，包括列表和饼图；
  b)下面的面板：显示CPU占用最多的类，按占比降序排列。
2)热点方法：
显示热点方法(CPU占用时间最多)，按占比降序排列，点击左侧小箭头可以向下查看(找到具体哪部分代码调用了这个方法导致的热点)；
3)调用树：
类似于热点方法选项卡，但是会显示所有热点方法的完整调用栈；
4)异常错误：
包含3个选项卡，显示异常错误的统计信息：
  a)概览：显示异常和错误的总数、最频繁发生异常的调用栈；
  b)异常错误：单独显示异常的总数、频繁调用栈，注意，异常默认是不记录的；
  c)错误：单独显示错误的总数，频繁调用栈。
5)编译：
显示即时编译的次数、编译大小、失败的日志；
6)类加载：
显示按时间的类加载、卸载的数量曲线图；

线程
包含6个选项卡：
1)概览：
分为上下面板：
  a)上面的面板：显示OS、JVM的CPU占用率的按时间统计的区域图；
  b)下面的面板：显示守护线程、活动线程数量的曲线图；
2)热点线程：
显示CPU占用最多的线程，以及选中线程的热点方法，分为两个面板：
  a)上面的面板：显示CPU占用最多的线程，默认按占比将序排列；
  b)下面的面板：显示上面面板选中线程的热点方法、调用栈。
3)争用：
显示因为锁争用导致的线程阻塞的统计信息，包含3个选项卡：
  a)顶级阻塞锁：发生阻塞最多的监视器(锁)对象的列表，包含了锁定次数、最长时间；
  b)顶级受阻线程：因为等待锁被阻塞时间最长的线程的列表；
  c)顶级阻塞线程：因为占用锁导致其他线程等待时间 最长的线程的列表。
4)等待时间：
显示因为Java线程休眠、监视器等待、Socket读取、监视器阻塞等原因导致的线程执行延迟情况，包括延迟信息的列表和饼图，已经导致延迟的线程调用栈。延迟相关事件包括：Java Thread Park(Wartting)、Java Monitor Wait(等待被唤醒)Java Monitor Blocked(积极进入同步区阻塞)等。
5)线程转储：
包含定时捕获的JVM中所有线程的瞬间调用栈镜像；
6)锁定实例：
包含4个选项卡：
a)锁定实例：监视器对象的列表，包含锁定次数、总计持续时间；
b)跟踪树：选中监视器对象的锁定调用栈，每个调用栈锁定的次数；
c)顶级线程：占用监视器次数最多的线程列表；
d)垃圾收集：显示垃圾收集的柱状图。注意，垃圾收集可能会将锁定实例移动到新地址。

I/O
包含5个选项卡：
1)概览：
分为两个选项卡：
  a)文件概览：上面部分是显示按时间读写文件字数的曲线、下面部分显示针对具体文件的读写字数、次数的列表；
  b)套接字概览：上面部分显示按时间读写Socket字节数的曲线、下面部分显示针对具体目标主机和端口读写字数以及次数的列表。
2)文件读取：
按文件、流程、事件统计文件读操作的列表，以及每个文件读取按时间的变化、线程调用栈；
3)文件写入：
按文件、流程、事件统计文件写操作的列表，以及每个文件写入按时间的变化、线程调用栈；
4)套接字读取：
按目标主机、线程、事件统计文Socket读操作的列表，以及每个Socket读取按时间的变化、线程调用栈；
5)套接字写入：
按目标主机、线程、事件统计文Socket写操作的列表，以及每个Socket写入按时间的变化、线程调用栈；

系统
主要显示操作系统和硬件的基本信息；

事件
共包含6个选项卡：
事件显示飞行记录的事件的相关信息，左侧面板事件类型可以过滤关注的事件类型。总体来说，事件分为3类：持续事件(duration，持续一段时间，例如GC事件)、瞬时事件(instant，立即发生和结束，例如内存溢出)、样本事件(sample，通过定期采样获取，例如栈度dump)。
1)概览：
  a)生成器：显示事件生产者的列表，以及制造事件的占比饼图；
  b)事件类型：显示各类型 事件持续总时间、次数的占比饼图。
2)日志：
显示每一个事件的记录，按时间排列，为每个事件显示：开始时间、结束时间、持续时间、产生事件的线程；
3)图形：
以时间轴的形式展示事件历史；
4)线程：
以列表形式展示个线程产生事件的数量、持续时间；
5)堆栈跟踪：
按产生事件持续时间长短，降序排列相关的调用栈；
6)直方图：
可以按单位时间类型进行简单的统计分析，支持不同的分组方式，支持总数、平均数、次数等指标，选中单个统计结果，可以显示调用栈。
